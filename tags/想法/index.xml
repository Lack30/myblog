<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>想法 - 标签 - lack 的个人博客</title>
        <link>http://xingyys.tech/tags/%E6%83%B3%E6%B3%95/</link>
        <description>想法 - 标签 - lack 的个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 10 Jan 2021 14:34:22 &#43;0800</lastBuildDate><atom:link href="http://xingyys.tech/tags/%E6%83%B3%E6%B3%95/" rel="self" type="application/rss+xml" /><item>
    <title>分布式的工作流实现</title>
    <link>http://xingyys.tech/posts/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Sun, 10 Jan 2021 14:34:22 &#43;0800</pubDate><author>
        <name>作者</name>
    </author><guid>http://xingyys.tech/posts/linux/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[本篇提供一个实现分布式工作流的思路。
系统组成部分：
 api (网关接口) : 为用户提供工作流的api接口 discovery (服务发现) : 用于服务的注册和发现 scheduler (调度中心) : 整体工作流的调度 broker (消息队列) : 订阅发布和数据传输 node (工作节点) : 每个工作单元的提供者和执行者  实现思路：
 node 启动时上传每个工作单元的基本信息: 包含工作单元输入输出、名称及其他内容 scheduler 保存这些信息并提供显示 scheduler 接收来自前端的数据并转化成工作流的信息，并执行  实现细节：
 scheduler 动态生成工作流信息，在 broker 中启动 topic 一个订阅者接收工作流的动态信息 scheduler 根据工作单元信息寻找 node 并传输信息 node 执行对应的工作单元发布信息到 broker 中工作流 topic scheduler 接收 topic 中的信息，如果中间发生错误，执行回滚操作 node 需要的输入参数保存在 context.Context 中，返回参数则 publish 到 topic 中  // 工作单元的接口 type WorkUnit interface { Do(ctx) error Undo(ctx) error String() string } type workflow struct{ units []WorkUnit } func Builder(ctx context.]]></description>
</item></channel>
</rss>
