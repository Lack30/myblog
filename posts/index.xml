<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - lack 的个人博客</title>
        <link>http://xingyys.tech/posts/</link>
        <description>所有文章 | lack 的个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>598223084@qq.com (Lack)</managingEditor>
            <webMaster>598223084@qq.com (Lack)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 26 Sep 2021 19:43:53 &#43;0800</lastBuildDate><atom:link href="http://xingyys.tech/posts/" rel="self" type="application/rss+xml" /><item>
    <title>云原生架构演进之路</title>
    <link>http://xingyys.tech/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF/</link>
    <pubDate>Sun, 26 Sep 2021 19:43:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/xingyys/myblog/main/posts/images/20210926195255.png" referrerpolicy="no-referrer">
            </div>架构的演进 单体 -&gt; 分布式 -&gt; 微服务 -&gt; 云原生]]></description>
</item><item>
    <title>tokio 高级用法</title>
    <link>http://xingyys.tech/tokio%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</link>
    <pubDate>Tue, 14 Sep 2021 13:03:07 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/tokio%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/xingyys/myblog/main/posts/images/rust-logo.png" referrerpolicy="no-referrer">
            </div>上一篇了解了 tokio 的基本用法，接下来我们继续深入 tokio 的详细用法。 深入 async rust 从 1.36 版本开始引入 async/await 作为支持异步相关的关键字。其内部是实现了 std::future::Future 这个特性。 Future std::future::Future]]></description>
</item><item>
    <title>Tokio 初尝试</title>
    <link>http://xingyys.tech/tokio%E5%88%9D%E5%B0%9D%E8%AF%95/</link>
    <pubDate>Sun, 12 Sep 2021 14:46:43 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/tokio%E5%88%9D%E5%B0%9D%E8%AF%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/xingyys/myblog/main/posts/images/rust-logo.png" referrerpolicy="no-referrer">
            </div>简介 Tokio is an asynchronous runtime for the Rust programming language. It provides the building blocks needed for writing networking applications. It gives the flexibility to target a wide range of systems, from large servers with dozens of cores to small embedded devices. Tokio 是 rust 实现的异步库，提供一个异步运行时。它具有以下的]]></description>
</item><item>
    <title>深入理解计算机系统</title>
    <link>http://xingyys.tech/csapp/</link>
    <pubDate>Tue, 31 Aug 2021 18:27:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/csapp/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/xingyys/myblog/main/posts/images/featured-image.png" referrerpolicy="no-referrer">
            </div>一、计算机系统漫游 计算机系统是由硬件和软件组成。 1.1 信息就是位 + 上下文 系统中所有的信息——包括磁盘文件、内存中的程序、内存中存放的用户数据以及]]></description>
</item><item>
    <title>Dblink</title>
    <link>http://xingyys.tech/dblink/</link>
    <pubDate>Mon, 30 Aug 2021 17:49:19 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/dblink/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/xingyys/myblog/main/posts/oracle/images/20210830185536.png" referrerpolicy="no-referrer">
            </div>查询所有触发器 1 select*fromuser_triggers; 根据名称禁用触发器 1 altertriggerLOGMNRGGC_TRIGGERdisable; 查询所有 job 1 select*fromuser_jobs; 根据 id 禁用 job 1 BEGINdbms_job.broken(4001,true);END; 禁用 oracle dblink 1 2 altersystemsetopen_links=0sid=&#39;$sid&#39;scope=spfile;altersystemsetopen_links_per_instance=0sid=&#39;$sid&#39;scope=spfile; 启用 oracle dblink 1 2 altersystemsetopen_links=4sid=&#39;$sid&#39;scope=spfile;altersystemsetopen_links_per_instance=4sid=&#39;$sid&#39;scope=spfile;]]></description>
</item><item>
    <title>KVM镜像管理工具libguestfs</title>
    <link>http://xingyys.tech/libguestfs/</link>
    <pubDate>Sun, 31 Jan 2021 10:38:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/libguestfs/</guid>
    <description><![CDATA[简介 libguestfs 是一套管理虚拟机镜像的工具。它提供以一系列命令和API来修改和管理虚拟机的镜像。 安装 直接使用 yum 安装 libguestfs : 1 yum install -y libguestfs-tool libguestfs-devel 默认不支持修改 windows 镜像]]></description>
</item><item>
    <title>qemu-img命令使用</title>
    <link>http://xingyys.tech/qemu-img%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Sun, 17 Jan 2021 22:35:06 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/qemu-img%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[qemu-img 是 QEMU 的磁盘管理工具，它允许用户创建、转化、修改 QEMU 磁盘。 注：qemu-img 操作磁盘时需要关闭 kvm 虚拟机，直接在虚拟机运行时修改磁盘可能会导致]]></description>
</item><item>
    <title>分布式的工作流实现</title>
    <link>http://xingyys.tech/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Sun, 10 Jan 2021 14:34:22 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[本篇提供一个实现分布式工作流的思路。 系统组成部分： api (网关接口) : 为用户提供工作流的api接口 discovery (服务发现) : 用于服务的注册和发现 scheduler (调度中]]></description>
</item><item>
    <title>Golang监控进程流量</title>
    <link>http://xingyys.tech/golang%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8B%E6%B5%81%E9%87%8F/</link>
    <pubDate>Sat, 09 Jan 2021 17:06:14 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/golang%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8B%E6%B5%81%E9%87%8F/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>KVM之虚拟机管理</title>
    <link>http://xingyys.tech/kvm_vm/</link>
    <pubDate>Wed, 06 Jan 2021 22:58:06 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://xingyys.tech/kvm_vm/</guid>
    <description><![CDATA[本篇文章介绍 KVM 虚拟机的管理，包括虚拟机的创建、修改、启动、删除等内容 安装虚拟机 使用 virt-install 安装 virt-install 是一个命令行工具，专门用于安装 kvm 虚拟机。执行以下命]]></description>
</item></channel>
</rss>
